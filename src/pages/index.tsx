import Head from 'next/head'
import {
  Box,
  Flex,
  Text,
  useDisclosure,
  useMediaQuery,
} from "@chakra-ui/react";
import Image from "next/image";
import { useContext } from "react";
import { Header } from "./../Components/Header";
import stateProvider from "../context/stateProvider";
import companiesImage from "./../Images/companies.png";
import { AuthModal } from "./../Components/modals/AuthModal";
import { getCurrentLocation } from "./../utils/index";
import { CustomSlider, SampleNextArrow } from "./../Components/UI/CustomSlider";
import { LocationErrorModal } from "./../Components/modals/LocationErrorModal.jsx";
import { carouselData } from "./../utils/constant";
/* @ts-ignore */
import { calculatePrediction } from "./../utils/prediciton";
import { useRouter } from "next/router";
import { useAuth } from "../context/authContext";
import dynamic from "next/dynamic";
import CalculateContainer from "./../Components/UI/Calculate/CalculateContainer";
const SavvyCal = dynamic(() => import("./../Components/savvyCall"));

export default function Home() {
  const { currentUser: CU, isUserSearched, setShowAuthModal } = useAuth();
  const { counts, setCounts, setLocation, setPropertyCoordinates } =
    useContext<any>(stateProvider);
  //  @ts-ignore
  const { bathrooms, bedrooms, guests } = counts;
  const [isLessThan680] = useMediaQuery("(max-width: 680px)");
  const navigate = useRouter();
  const { isOpen, onClose, onOpen } = useDisclosure();
  const { isOpen: showLoading, onOpen: setShowLoading } = useDisclosure();
  const {
    isOpen: isSignUpOpen,
    onOpen: onSignupOpen,
    onClose: onSignupClose,
  } = useDisclosure();
  const {
    isOpen: isSuccessModal,
    onOpen: onSuccessModal,
    onClose: onSuccessClose,
  } = useDisclosure();
  const {
    isOpen: isLocationError,
    onOpen: onLocationError,
    onClose: onLocationErrorClose,
  } = useDisclosure();

  const {
    location,
    isSelectedFromDropdown,
    propertyCoordinates,
    setIsItFromHeader,
  } = useContext<any>(stateProvider);
  const settings = {
    infinite: true,
    speed: 500,
    slidesToScroll: 4,
    dots: false,
    nextArrow: <SampleNextArrow />,
    prevArrow: <SampleNextArrow />,
    variableWidth: true,
  };
  const handleGetCurrentLocation = () => {
    // Display a loading indicator to indicate that the current location is being retrieved.
    onOpen();

    // Getting the current location
    getCurrentLocation(setLocation, onClose, onLocationError);
  };
  const handleCalculatePrediction = async () => {
    if (!location || !isSelectedFromDropdown) return;
    // If the user is authenticated and has searched
    if (CU && isUserSearched) {
      try {
        // Show loading spinner
        setShowLoading();
        const result = await calculatePrediction(
          location,
          bedrooms,
          bathrooms,
          CU,
          counts,
          propertyCoordinates,
          guests
        );
        // Navigate to the result page
        navigate.push(`/result/${result.id}`);
      } catch (error) {
        console.error("Failed to calculate prediction:", error);
        // Handle error
      } finally {
        // Hide loading spinner
        setShowLoading();
      }
    } else if (!CU && isUserSearched) {
      // If the user is not authenticated and has searched
      setShowAuthModal(true);
      // Prompt user to authenticate
    }
  };

  return (
    <>
      <Head>
        <title>Create Next App</title>
        <meta name="description" content="Generated by create next app" />
        <meta name="viewport" content="width=device-width, initial-scale=1" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <Flex
        direction={"column"}
        bg={"#F6F6F6"}
        height={"100vh"}
        overflowY={"auto"}
      >
        <SavvyCal />
        <AuthModal />
        <Box bg={"white"} height={"100vh"} overflowY={"auto"}>
          <Header
            isSuccessModal={isSuccessModal}
            onSuccessModal={onSuccessModal}
            onSuccessClose={onSuccessClose}
            isOpen={isSignUpOpen}
            onOpen={onSignupOpen}
            onClose={() => {
              onSignupClose();
              setIsItFromHeader(false);
            }}
          />
          <Flex
            px={["20px", "30px"]}
            alignItems={"center"}
            flexDir={"column"}
            pt={"20px"}
            maxW={"100%"}
            w="800px"
            margin={"auto"}
          >
            <Flex
              mt={["15px", "35px"]}
              mb={"20px"}
              alignItems={"center"}
              p={1}
              px={"16px"}
              py={"7px"}
              borderRadius="31px"
              boxShadow={"0 0 0 3px rgb(210 4 125 / 5%)"}
              border={"1px solid rgb(252, 212, 248)"}
              w={"320px"}
              maxW="100%"
            >
              <Text color={"rgb(247, 34, 219)"} fontFamily={"GTMedium"}>
                New
              </Text>
              <Box mx={"15px"} w={"2px"} height={"23px"} bg={"#e2e8f0"} />
              <Text fontFamily={"GTMedium"} color={"black"}>
                Introducing advanced reports
              </Text>
            </Flex>
            <Box
              textAlign={"center"}
              fontSize={["30px", "30px", "40px"]}
              fontFamily={"GTBold"}
              mb={["15px", "35px"]}
            >
              <Text>Find your next vacation </Text>
              <Text mt={"-10px"}>
                rental investment
                <Text as={"span"} color={"rgb(247, 34, 219)"}>
                  .
                </Text>
              </Text>
            </Box>
            <CalculateContainer
              handleGetCurrentLocation={() => handleGetCurrentLocation()}
              handleCalculatePrediction={handleCalculatePrediction}
              isOpen={isOpen}
              showLoading={showLoading}
            />

            <Box w={"100%"} mt={"70px"}>
              <CustomSlider
                isLessThan680={isLessThan680}
                settings={settings}
                data={carouselData}
                setLocation={setLocation}
                setPropertyCoordinates={setPropertyCoordinates}
              />
            </Box>

            {/* Company Image */}
            <Box w="100%" height={"500px"} mt={"100px"} pos={"relative"}>
              <Image
                src={companiesImage.src}
                layout="fill"
                objectFit="contain"
                alt="s"
              />
            </Box>
          </Flex>

          <LocationErrorModal
            isLocationError={isLocationError}
            onLocationErrorClose={onLocationErrorClose}
          />
        </Box>
      </Flex>
    </>
  );
}
